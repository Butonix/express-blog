{
  "swagger": "2.0",
  "info": {
    "title": "Express Blog",
    "version": "1.0.0",
    "description": "An open API to my own MEVN (MongoDB, Express, Vue.js, Node.js) site similar to reddit.com or pikabu.ru (mostly copies many pikabu features) with many different and awesome features, open swagger API documentation. Main reason of making this site is fun and learning new things while making it"
  },
  "basePath": "/api",
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "securityDefinitions": {
    "myCookie": {
      "type": "apiKey",
      "name": "Cookie",
      "in": "header"
    }
  },
  "paths": {
    "/comments": {
      "get": {
        "summary": "Get user's comments or comments in a post",
        "tags": [
          "Comments"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "type": "integer",
            "description": "The number of items to skip before starting to collect the result set."
          },
          {
            "in": "query",
            "name": "limit",
            "type": "integer",
            "description": "The numbers of items to return."
          },
          {
            "in": "query",
            "name": "login",
            "type": "string",
            "description": "user which comments you want to see",
            "example": "user123"
          },
          {
            "in": "query",
            "name": "post",
            "required": true,
            "type": "string",
            "description": "post id",
            "example": "5d546c95c0f3a272b2062205"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "$ref": "#/definitions/Comment"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          }
        }
      },
      "post": {
        "summary": "Create a comment",
        "tags": [
          "Comments"
        ],
        "description": "Create a comment to a post",
        "security": [
          {
            "myCookie": []
          }
        ],
        "parameters": [
          {
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "post"
              ],
              "properties": {
                "body": {
                  "type": "string",
                  "example": "My body is dry"
                },
                "post": {
                  "type": "string",
                  "example": "5d546c95c0f3a272b2062205"
                },
                "parent": {
                  "type": "string",
                  "example": "5d55daa034c1991762147c2b"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OK"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/comments/{id}": {
      "put": {
        "summary": "Edit comment",
        "tags": [
          "Comments"
        ],
        "description": "Edit comment by its `id`",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true
          },
          {
            "in": "body",
            "name": "changes",
            "schema": {
              "type": "object",
              "properties": {
                "body": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "security": [
          "myCookie[]"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OK"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          }
        }
      },
      "delete": {
        "tags": [
          "Comments"
        ],
        "summary": "Delete comment",
        "description": "Delete comment by its `id`",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "type": "string",
            "required": true
          }
        ],
        "security": [
          "myCookie[]"
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OK"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "/posts": {
      "get": {
        "tags": [
          "Posts"
        ],
        "description": "Get all posts",
        "summary": "Get all posts",
        "parameters": [
          {
            "in": "query",
            "name": "limit",
            "type": "string",
            "description": "posts per page"
          },
          {
            "in": "query",
            "name": "offset",
            "type": "string",
            "description": "offset from element"
          },
          {
            "in": "query",
            "name": "author",
            "type": "string",
            "description": "By author"
          }
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "object",
              "properties": {
                "posts": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/Post"
                  }
                },
                "pages": {
                  "type": "number"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Posts"
        ],
        "description": "Create a post with title `title` and body `body`. Attachments are taken from the template",
        "summary": "create a post",
        "security": [
          "myCookie[]"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "post",
            "schema": {
              "type": "object",
              "required": [
                "title",
                "body"
              ],
              "properties": {
                "title": {
                  "type": "string"
                },
                "body": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/posts/{slug}": {
      "put": {
        "tags": [
          "Posts"
        ],
        "security": [
          "myCookie[]"
        ],
        "description": "Edit a post. You can edit a post only within certain time after it is created",
        "summary": "edit a post",
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "schema": {
              "type": "object",
              "name": "data",
              "properties": {
                "title": {
                  "type": "string"
                },
                "body": {
                  "type": "string"
                },
                "toDelete": {
                  "type": "array",
                  "items": {
                    "description": "paths to delete",
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OK"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "delete": {
        "tags": [
          "Posts"
        ],
        "summary": "delete a post by its slug",
        "description": "delete a post by its `slug`",
        "security": [
          "myCookie[]"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OK"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      },
      "get": {
        "tags": [
          "Posts"
        ],
        "summary": "get a post by its slug",
        "description": "Get a post by its `slug`",
        "parameters": [
          {
            "in": "path",
            "name": "slug",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/Post"
            }
          },
          "404": {
            "$ref": "#/responses/NotFound"
          }
        }
      }
    },
    "posts/upload": {
      "post": {
        "tags": [
          "Posts"
        ],
        "summary": "upload picture",
        "description": "Upload the picture to template. Allowed extentions: `jpg|jpeg|png|gif`",
        "security": [
          "myCookie[]"
        ],
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "in": "formData",
            "name": "attachments",
            "type": "file",
            "description": "the file to upload"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/OK"
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "409": {
            "$ref": "#/responses/Conflict"
          },
          "413": {
            "$ref": "#/responses/RequestEntityTooLarge"
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/responses/InternalServerError"
          }
        }
      }
    },
    "/users/{login}/template": {
      "get": {
        "summary": "Get user saved template",
        "tags": [
          "Users"
        ],
        "security": [
          {
            "myCookie": []
          }
        ],
        "description": "Returns user's saved template for post",
        "parameters": [
          {
            "in": "path",
            "name": "login",
            "type": "string",
            "required": true,
            "description": "User name",
            "example": "user1"
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "body": {
                  "type": "string"
                },
                "attachments": {
                  "description": "Array of pic paths",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          }
        }
      },
      "put": {
        "summary": "Update user template",
        "tags": [
          "Users"
        ],
        "description": "Update user post template, delete attachments (pics with following paths)",
        "security": [
          {
            "myCookie": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "login",
            "type": "string",
            "required": true,
            "description": "User name",
            "example": "user1"
          },
          {
            "in": "body",
            "name": "template",
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "body": {
                  "type": "string"
                },
                "delete": {
                  "type": "array",
                  "items": {
                    "description": "path to pic",
                    "type": "string"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/OK"
            }
          },
          "401": {
            "$ref": "#/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/responses/Forbidden"
          }
        }
      }
    },
    "/users": {
      "post": {
        "summary": "Register a user",
        "tags": [
          "Users"
        ],
        "description": "Register a new user and return its cookie token (connect.sid)",
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "schema": {
              "type": "object",
              "required": [
                "login",
                "password",
                "confirm"
              ],
              "description": "user's credential",
              "properties": {
                "login": {
                  "type": "string",
                  "minLength": 3,
                  "maxLength": 10
                },
                "password": {
                  "type": "string",
                  "minLength": 6
                },
                "confirm": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "ok",
            "schema": {
              "$ref": "#/definitions/OK"
            }
          },
          "422": {
            "$ref": "#/responses/UnprocessableEntity"
          }
        }
      }
    },
    "/users/auth": {
      "post": {
        "summary": "Login to the application",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "Users"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "user",
            "description": "user's credential",
            "schema": {
              "type": "object",
              "required": [
                "login",
                "password"
              ],
              "properties": {
                "login": {
                  "type": "string",
                  "example": "user123"
                },
                "password": {
                  "type": "string",
                  "example": "u1234"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Authorization information is missing or invalid."
          },
          "422": {
            "description": "Validation error"
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "summary": "Log out the current user",
        "security": [
          {
            "myCookie": []
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "definitions": {
    "Comment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "post": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/Author"
        },
        "createdAt": {
          "type": "string",
          "example": "2019-08-16T01:04:02.504Z"
        },
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Comment"
          }
        }
      }
    },
    "Post": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "commentCount": {
          "description": "number of comments in a post",
          "type": "number"
        },
        "title": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "author": {
          "$ref": "#/definitions/Author"
        },
        "slug": {
          "type": "string",
          "example": "My-post-title-d2k5g8"
        },
        "uploads": {
          "type": "array",
          "description": "array paths of attachments",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "example": "2019-08-21T22:05:44.788Z"
        },
        "updatedAt": {
          "type": "string",
          "example": "2019-09-22T14:02:14.532Z"
        }
      }
    },
    "Author": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "login": {
          "type": "string",
          "example": "user123"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "error": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            }
          }
        }
      },
      "required": [
        "message"
      ]
    },
    "OK": {
      "type": "object",
      "properties": {
        "ok": {
          "type": "boolean",
          "example": true
        }
      }
    }
  },
  "responses": {
    "NotFound": {
      "description": "The specified resource was not found",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Unauthorized": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Forbidden": {
      "description": "Not enough rights",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "UnprocessableEntity": {
      "description": "Validation error",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "Conflict": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "RequestEntityTooLarge": {
      "description": "Request entity too large",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "InternalServerError": {
      "description": "Internal server error",
      "schema": {
        "$ref": "#/definitions/Error"
      }
    },
    "OK": {
      "description": "Everything went alright",
      "schema": {
        "$ref": "#/definitions/OK"
      }
    }
  },
  "parameters": {},
  "tags": [
    {
      "name": "Comments",
      "description": "Actions with comments"
    },
    {
      "name": "Posts",
      "description": "Actions with posts"
    },
    {
      "name": "Users",
      "description": "Actions with Users collection"
    }
  ]
}